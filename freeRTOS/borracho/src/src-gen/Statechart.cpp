/* Generated by itemis CREATE code generator. */

#include "Statechart.h"

/*! \file
Implementation of the state machine 'Statechart'
*/




Statechart::Statechart() :
	low(0),
	high(1),
	output(1),
	led_pin(2),
	menu_raised(false),
	standard_process_raised(false),
	heating_raised(false),
	resting_raised(false),
	heating_2_raised(false),
	resting_2_raised(false),
	idle_raised(false),
	custom_setup_raised(false),
	set_temperature_raised(false),
	set_time_raised(false),
	set_temperature_2_raised(false),
	set_time_2_raised(false),
	add_step_raised(false),
	standard_process_custom_raised(false),
	finish_process_raised(false),
	finish_process_idle_raised(false),
	delay(1000),
	start_button_raised(false),
	exit_process_raised(false),
	recipe_1_raised(false),
	recipe_2_raised(false),
	recipe_3_raised(false),
	recipe_4_raised(false),
	recipe_5_raised(false),
	recipe_back_menu_raised(false),
	recipe_1_process_raised(false),
	recipe_2_process_raised(false),
	recipe_3_process_raised(false),
	recipe_4_process_raised(false),
	recipe_5_process_raised(false),
	timerService(sc_null),
	ifaceOperationCallback(sc_null),
	isExecuting(false)
{
	for (sc_ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Statechart_last_state;
	
	clearInEvents();
}

Statechart::~Statechart()
{
	while (!inEventQueue.empty()) {
		statechart_events::SctEvent* nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
		delete nextEvent;
	}
}


using namespace statechart_events;

SctEvent* Statechart::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

sc_boolean Statechart::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return false;
	}
	switch(event->name)
	{
		case menu:
		case standard_process:
		case heating:
		case resting:
		case heating_2:
		case resting_2:
		case idle:
		case custom_setup:
		case set_temperature:
		case set_time:
		case set_temperature_2:
		case set_time_2:
		case add_step:
		case standard_process_custom:
		case finish_process:
		case finish_process_idle:
		case start_button:
		case exit_process:
		case recipe_1:
		case recipe_2:
		case recipe_3:
		case recipe_4:
		case recipe_5:
		case recipe_back_menu:
		case recipe_1_process:
		case recipe_2_process:
		case recipe_3_process:
		case recipe_4_process:
		case recipe_5_process:
		{
			return iface_dispatch_event(event);
		}
		case Statechart_main_region_INIT_SYSTEM_time_event_0:
		{
			delete event;
			return timeEvents[0] = true;
		}
		default:
			delete event;
			return false;
	}
}

sc_boolean Statechart::internal_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}
sc_boolean Statechart::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case menu:
		{
			internal_raiseMenu();
			break;
		}
		case standard_process:
		{
			internal_raiseStandard_process();
			break;
		}
		case heating:
		{
			internal_raiseHeating();
			break;
		}
		case resting:
		{
			internal_raiseResting();
			break;
		}
		case heating_2:
		{
			internal_raiseHeating_2();
			break;
		}
		case resting_2:
		{
			internal_raiseResting_2();
			break;
		}
		case idle:
		{
			internal_raiseIdle();
			break;
		}
		case custom_setup:
		{
			internal_raiseCustom_setup();
			break;
		}
		case set_temperature:
		{
			internal_raiseSet_temperature();
			break;
		}
		case set_time:
		{
			internal_raiseSet_time();
			break;
		}
		case set_temperature_2:
		{
			internal_raiseSet_temperature_2();
			break;
		}
		case set_time_2:
		{
			internal_raiseSet_time_2();
			break;
		}
		case add_step:
		{
			internal_raiseAdd_step();
			break;
		}
		case standard_process_custom:
		{
			internal_raiseStandard_process_custom();
			break;
		}
		case finish_process:
		{
			internal_raiseFinish_process();
			break;
		}
		case finish_process_idle:
		{
			internal_raiseFinish_process_idle();
			break;
		}
		case start_button:
		{
			internal_raiseStart_button();
			break;
		}
		case exit_process:
		{
			internal_raiseExit_process();
			break;
		}
		case recipe_1:
		{
			internal_raiseRecipe_1();
			break;
		}
		case recipe_2:
		{
			internal_raiseRecipe_2();
			break;
		}
		case recipe_3:
		{
			internal_raiseRecipe_3();
			break;
		}
		case recipe_4:
		{
			internal_raiseRecipe_4();
			break;
		}
		case recipe_5:
		{
			internal_raiseRecipe_5();
			break;
		}
		case recipe_back_menu:
		{
			internal_raiseRecipe_back_menu();
			break;
		}
		case recipe_1_process:
		{
			internal_raiseRecipe_1_process();
			break;
		}
		case recipe_2_process:
		{
			internal_raiseRecipe_2_process();
			break;
		}
		case recipe_3_process:
		{
			internal_raiseRecipe_3_process();
			break;
		}
		case recipe_4_process:
		{
			internal_raiseRecipe_4_process();
			break;
		}
		case recipe_5_process:
		{
			internal_raiseRecipe_5_process();
			break;
		}
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}

StatechartEventName Statechart::getTimedEventName(sc_eventid evid)
{
	if (evid == (sc_eventid)(&timeEvents[0])) {
		return Statechart_main_region_INIT_SYSTEM_time_event_0;
	}
	return invalid_event;
}



sc_boolean Statechart::isActive() const
{
	return stateConfVector[0] != Statechart_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Statechart::isFinal() const
{
	   return false;
}

sc_boolean Statechart::check(){
	if(timerService == sc_null) {
		return false;
	}
	if (this->ifaceOperationCallback == sc_null) {
		return false;
	}
	return true;
}


void Statechart::setTimerService(sc::timer::TimerServiceInterface* timerService_)
{
	this->timerService = timerService_;
}

sc::timer::TimerServiceInterface* Statechart::getTimerService()
{
	return timerService;
}

sc_integer Statechart::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void Statechart::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		inEventQueue.push_back(new TimedSctEvent(getTimedEventName(evid)));
		runCycle();
	}
}


sc_boolean Statechart::isStateActive(StatechartStates state) const
{
	switch (state)
	{
		case main_region_IDLE :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_IDLE] == main_region_IDLE);
			break;
		}
		case main_region_MENU :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MENU] == main_region_MENU);
			break;
		}
		case main_region_EXIT :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_EXIT] == main_region_EXIT);
			break;
		}
		case main_region_STANDARD_PROCESS :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STANDARD_PROCESS] >= main_region_STANDARD_PROCESS && stateConfVector[SCVI_MAIN_REGION_STANDARD_PROCESS] <= main_region_STANDARD_PROCESS_standard_process_RESTING_2);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_START_PROCESS :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STANDARD_PROCESS_STANDARD_PROCESS_START_PROCESS] == main_region_STANDARD_PROCESS_standard_process_START_PROCESS);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_HEATING :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STANDARD_PROCESS_STANDARD_PROCESS_HEATING] == main_region_STANDARD_PROCESS_standard_process_HEATING);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_RESTING :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STANDARD_PROCESS_STANDARD_PROCESS_RESTING] == main_region_STANDARD_PROCESS_standard_process_RESTING);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STANDARD_PROCESS_STANDARD_PROCESS_FINISH_PROCESS] == main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_HEATING_2 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STANDARD_PROCESS_STANDARD_PROCESS_HEATING_2] == main_region_STANDARD_PROCESS_standard_process_HEATING_2);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_RESTING_2 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_STANDARD_PROCESS_STANDARD_PROCESS_RESTING_2] == main_region_STANDARD_PROCESS_standard_process_RESTING_2);
			break;
		}
		case main_region_CUSTOM_SETUP :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_CUSTOM_SETUP] >= main_region_CUSTOM_SETUP && stateConfVector[SCVI_MAIN_REGION_CUSTOM_SETUP] <= main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_CUSTOM_SETUP_CUSTOM_SETUP_SET_TEMPERATURE] == main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TIME :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_CUSTOM_SETUP_CUSTOM_SETUP_SET_TIME] == main_region_CUSTOM_SETUP_custom_setup_SET_TIME);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_CUSTOM_SETUP_CUSTOM_SETUP_SET_TEMPERATURE_2] == main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_CUSTOM_SETUP_CUSTOM_SETUP_SET_TIME_2] == main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_CUSTOM_SETUP_CUSTOM_SETUP_START_SETUP_PROCESS] == main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS);
			break;
		}
		case main_region_INIT_SYSTEM :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_INIT_SYSTEM] == main_region_INIT_SYSTEM);
			break;
		}
		case main_region_RECIPE_1 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_RECIPE_1] == main_region_RECIPE_1);
			break;
		}
		case main_region_RECIPE_2 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_RECIPE_2] == main_region_RECIPE_2);
			break;
		}
		case main_region_RECIPE_3 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_RECIPE_3] == main_region_RECIPE_3);
			break;
		}
		case main_region_RECIPE_4 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_RECIPE_4] == main_region_RECIPE_4);
			break;
		}
		case main_region_RECIPE_5 :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_RECIPE_5] == main_region_RECIPE_5);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

void Statechart::setLow(sc_integer low_)
{
	this->low = low_;
}
void Statechart::setHigh(sc_integer high_)
{
	this->high = high_;
}
void Statechart::setOutput(sc_integer output_)
{
	this->output = output_;
}
void Statechart::setLed_pin(sc_integer led_pin_)
{
	this->led_pin = led_pin_;
}
/* Functions for event menu in interface  */
void Statechart::raiseMenu()
{
	inEventQueue.push_back(new SctEvent__menu(menu));
        runCycle();
}
void Statechart::internal_raiseMenu()
{
	menu_raised = true;
}
/* Functions for event standard_process in interface  */
void Statechart::raiseStandard_process()
{
	inEventQueue.push_back(new SctEvent__standard_process(standard_process));
        runCycle();
}
void Statechart::internal_raiseStandard_process()
{
	standard_process_raised = true;
}
/* Functions for event heating in interface  */
void Statechart::raiseHeating()
{
	inEventQueue.push_back(new SctEvent__heating(heating));
        runCycle();
}
void Statechart::internal_raiseHeating()
{
	heating_raised = true;
}
/* Functions for event resting in interface  */
void Statechart::raiseResting()
{
	inEventQueue.push_back(new SctEvent__resting(resting));
        runCycle();
}
void Statechart::internal_raiseResting()
{
	resting_raised = true;
}
/* Functions for event heating_2 in interface  */
void Statechart::raiseHeating_2()
{
	inEventQueue.push_back(new SctEvent__heating_2(heating_2));
        runCycle();
}
void Statechart::internal_raiseHeating_2()
{
	heating_2_raised = true;
}
/* Functions for event resting_2 in interface  */
void Statechart::raiseResting_2()
{
	inEventQueue.push_back(new SctEvent__resting_2(resting_2));
        runCycle();
}
void Statechart::internal_raiseResting_2()
{
	resting_2_raised = true;
}
/* Functions for event idle in interface  */
void Statechart::raiseIdle()
{
	inEventQueue.push_back(new SctEvent__idle(idle));
        runCycle();
}
void Statechart::internal_raiseIdle()
{
	idle_raised = true;
}
/* Functions for event custom_setup in interface  */
void Statechart::raiseCustom_setup()
{
	inEventQueue.push_back(new SctEvent__custom_setup(custom_setup));
        runCycle();
}
void Statechart::internal_raiseCustom_setup()
{
	custom_setup_raised = true;
}
/* Functions for event set_temperature in interface  */
void Statechart::raiseSet_temperature()
{
	inEventQueue.push_back(new SctEvent__set_temperature(set_temperature));
        runCycle();
}
void Statechart::internal_raiseSet_temperature()
{
	set_temperature_raised = true;
}
/* Functions for event set_time in interface  */
void Statechart::raiseSet_time()
{
	inEventQueue.push_back(new SctEvent__set_time(set_time));
        runCycle();
}
void Statechart::internal_raiseSet_time()
{
	set_time_raised = true;
}
/* Functions for event set_temperature_2 in interface  */
void Statechart::raiseSet_temperature_2()
{
	inEventQueue.push_back(new SctEvent__set_temperature_2(set_temperature_2));
        runCycle();
}
void Statechart::internal_raiseSet_temperature_2()
{
	set_temperature_2_raised = true;
}
/* Functions for event set_time_2 in interface  */
void Statechart::raiseSet_time_2()
{
	inEventQueue.push_back(new SctEvent__set_time_2(set_time_2));
        runCycle();
}
void Statechart::internal_raiseSet_time_2()
{
	set_time_2_raised = true;
}
/* Functions for event add_step in interface  */
void Statechart::raiseAdd_step()
{
	inEventQueue.push_back(new SctEvent__add_step(add_step));
        runCycle();
}
void Statechart::internal_raiseAdd_step()
{
	add_step_raised = true;
}
/* Functions for event standard_process_custom in interface  */
void Statechart::raiseStandard_process_custom()
{
	inEventQueue.push_back(new SctEvent__standard_process_custom(standard_process_custom));
        runCycle();
}
void Statechart::internal_raiseStandard_process_custom()
{
	standard_process_custom_raised = true;
}
/* Functions for event finish_process in interface  */
void Statechart::raiseFinish_process()
{
	inEventQueue.push_back(new SctEvent__finish_process(finish_process));
        runCycle();
}
void Statechart::internal_raiseFinish_process()
{
	finish_process_raised = true;
}
/* Functions for event finish_process_idle in interface  */
void Statechart::raiseFinish_process_idle()
{
	inEventQueue.push_back(new SctEvent__finish_process_idle(finish_process_idle));
        runCycle();
}
void Statechart::internal_raiseFinish_process_idle()
{
	finish_process_idle_raised = true;
}
/* Functions for event start_button in interface  */
void Statechart::raiseStart_button()
{
	inEventQueue.push_back(new SctEvent__start_button(start_button));
        runCycle();
}
void Statechart::internal_raiseStart_button()
{
	start_button_raised = true;
}
/* Functions for event exit_process in interface  */
void Statechart::raiseExit_process()
{
	inEventQueue.push_back(new SctEvent__exit_process(exit_process));
        runCycle();
}
void Statechart::internal_raiseExit_process()
{
	exit_process_raised = true;
}
/* Functions for event recipe_1 in interface  */
void Statechart::raiseRecipe_1()
{
	inEventQueue.push_back(new SctEvent__recipe_1(recipe_1));
        runCycle();
}
void Statechart::internal_raiseRecipe_1()
{
	recipe_1_raised = true;
}
/* Functions for event recipe_2 in interface  */
void Statechart::raiseRecipe_2()
{
	inEventQueue.push_back(new SctEvent__recipe_2(recipe_2));
        runCycle();
}
void Statechart::internal_raiseRecipe_2()
{
	recipe_2_raised = true;
}
/* Functions for event recipe_3 in interface  */
void Statechart::raiseRecipe_3()
{
	inEventQueue.push_back(new SctEvent__recipe_3(recipe_3));
        runCycle();
}
void Statechart::internal_raiseRecipe_3()
{
	recipe_3_raised = true;
}
/* Functions for event recipe_4 in interface  */
void Statechart::raiseRecipe_4()
{
	inEventQueue.push_back(new SctEvent__recipe_4(recipe_4));
        runCycle();
}
void Statechart::internal_raiseRecipe_4()
{
	recipe_4_raised = true;
}
/* Functions for event recipe_5 in interface  */
void Statechart::raiseRecipe_5()
{
	inEventQueue.push_back(new SctEvent__recipe_5(recipe_5));
        runCycle();
}
void Statechart::internal_raiseRecipe_5()
{
	recipe_5_raised = true;
}
/* Functions for event recipe_back_menu in interface  */
void Statechart::raiseRecipe_back_menu()
{
	inEventQueue.push_back(new SctEvent__recipe_back_menu(recipe_back_menu));
        runCycle();
}
void Statechart::internal_raiseRecipe_back_menu()
{
	recipe_back_menu_raised = true;
}
/* Functions for event recipe_1_process in interface  */
void Statechart::raiseRecipe_1_process()
{
	inEventQueue.push_back(new SctEvent__recipe_1_process(recipe_1_process));
        runCycle();
}
void Statechart::internal_raiseRecipe_1_process()
{
	recipe_1_process_raised = true;
}
/* Functions for event recipe_2_process in interface  */
void Statechart::raiseRecipe_2_process()
{
	inEventQueue.push_back(new SctEvent__recipe_2_process(recipe_2_process));
        runCycle();
}
void Statechart::internal_raiseRecipe_2_process()
{
	recipe_2_process_raised = true;
}
/* Functions for event recipe_3_process in interface  */
void Statechart::raiseRecipe_3_process()
{
	inEventQueue.push_back(new SctEvent__recipe_3_process(recipe_3_process));
        runCycle();
}
void Statechart::internal_raiseRecipe_3_process()
{
	recipe_3_process_raised = true;
}
/* Functions for event recipe_4_process in interface  */
void Statechart::raiseRecipe_4_process()
{
	inEventQueue.push_back(new SctEvent__recipe_4_process(recipe_4_process));
        runCycle();
}
void Statechart::internal_raiseRecipe_4_process()
{
	recipe_4_process_raised = true;
}
/* Functions for event recipe_5_process in interface  */
void Statechart::raiseRecipe_5_process()
{
	inEventQueue.push_back(new SctEvent__recipe_5_process(recipe_5_process));
        runCycle();
}
void Statechart::internal_raiseRecipe_5_process()
{
	recipe_5_process_raised = true;
}
sc_integer Statechart::getDelay() const
{
	return delay
	;
}

void Statechart::setDelay(sc_integer delay_)
{
	this->delay = delay_;
}
void Statechart::setOperationCallback(OperationCallback* operationCallback)
{
	ifaceOperationCallback = operationCallback;
}

// implementations of all internal functions
/* Entry action for state 'IDLE'. */
void Statechart::enact_main_region_IDLE()
{
	/* Entry action for state 'IDLE'. */
	ifaceOperationCallback->beginDisplay();
	ifaceOperationCallback->beginMatrix();
	ifaceOperationCallback->showStartup();
	ifaceOperationCallback->showIdleScreen();
}

/* Entry action for state 'MENU'. */
void Statechart::enact_main_region_MENU()
{
	/* Entry action for state 'MENU'. */
	ifaceOperationCallback->showRecipes();
	ifaceOperationCallback->digitalWrite(led_pin, low);
}

/* Entry action for state 'EXIT'. */
void Statechart::enact_main_region_EXIT()
{
	/* Entry action for state 'EXIT'. */
	ifaceOperationCallback->shutdownSystem();
}

/* Entry action for state 'START_PROCESS'. */
void Statechart::enact_main_region_STANDARD_PROCESS_standard_process_START_PROCESS()
{
	/* Entry action for state 'START_PROCESS'. */
	ifaceOperationCallback->initializeProcess();
}

/* Entry action for state 'HEATING'. */
void Statechart::enact_main_region_STANDARD_PROCESS_standard_process_HEATING()
{
	/* Entry action for state 'HEATING'. */
	ifaceOperationCallback->heat(67);
}

/* Entry action for state 'RESTING'. */
void Statechart::enact_main_region_STANDARD_PROCESS_standard_process_RESTING()
{
	/* Entry action for state 'RESTING'. */
	ifaceOperationCallback->time(25);
}

/* Entry action for state 'FINISH_PROCESS'. */
void Statechart::enact_main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS()
{
	/* Entry action for state 'FINISH_PROCESS'. */
	ifaceOperationCallback->showFinished();
}

/* Entry action for state 'HEATING_2'. */
void Statechart::enact_main_region_STANDARD_PROCESS_standard_process_HEATING_2()
{
	/* Entry action for state 'HEATING_2'. */
	ifaceOperationCallback->heat(78);
}

/* Entry action for state 'RESTING_2'. */
void Statechart::enact_main_region_STANDARD_PROCESS_standard_process_RESTING_2()
{
	/* Entry action for state 'RESTING_2'. */
	ifaceOperationCallback->time(13);
}

/* Entry action for state 'SET_TEMPERATURE'. */
void Statechart::enact_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE()
{
	/* Entry action for state 'SET_TEMPERATURE'. */
	ifaceOperationCallback->setTemperature(33);
}

/* Entry action for state 'SET_TIME'. */
void Statechart::enact_main_region_CUSTOM_SETUP_custom_setup_SET_TIME()
{
	/* Entry action for state 'SET_TIME'. */
	ifaceOperationCallback->setTime(10);
}

/* Entry action for state 'SET_TEMPERATURE_2'. */
void Statechart::enact_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2()
{
	/* Entry action for state 'SET_TEMPERATURE_2'. */
	ifaceOperationCallback->setTemperature(77);
}

/* Entry action for state 'SET_TIME_2'. */
void Statechart::enact_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2()
{
	/* Entry action for state 'SET_TIME_2'. */
	ifaceOperationCallback->setTime(15);
}

/* Entry action for state 'START_SETUP_PROCESS'. */
void Statechart::enact_main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS()
{
	/* Entry action for state 'START_SETUP_PROCESS'. */
	ifaceOperationCallback->initializeSetupProcess();
}

/* Entry action for state 'INIT_SYSTEM'. */
void Statechart::enact_main_region_INIT_SYSTEM()
{
	/* Entry action for state 'INIT_SYSTEM'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), (((sc_time) 5) * 1000), false);
	ifaceOperationCallback->pinMode(led_pin, output);
	ifaceOperationCallback->digitalWrite(led_pin, high);
}

/* Entry action for state 'RECIPE_1'. */
void Statechart::enact_main_region_RECIPE_1()
{
	/* Entry action for state 'RECIPE_1'. */
	ifaceOperationCallback->showRecipe(1);
}

/* Entry action for state 'RECIPE_2'. */
void Statechart::enact_main_region_RECIPE_2()
{
	/* Entry action for state 'RECIPE_2'. */
	ifaceOperationCallback->showRecipe(2);
}

/* Entry action for state 'RECIPE_3'. */
void Statechart::enact_main_region_RECIPE_3()
{
	/* Entry action for state 'RECIPE_3'. */
	ifaceOperationCallback->showRecipe(3);
}

/* Entry action for state 'RECIPE_4'. */
void Statechart::enact_main_region_RECIPE_4()
{
	/* Entry action for state 'RECIPE_4'. */
	ifaceOperationCallback->showRecipe(4);
}

/* Entry action for state 'RECIPE_5'. */
void Statechart::enact_main_region_RECIPE_5()
{
	/* Entry action for state 'RECIPE_5'. */
	ifaceOperationCallback->showRecipe(5);
}

/* Exit action for state 'INIT_SYSTEM'. */
void Statechart::exact_main_region_INIT_SYSTEM()
{
	/* Exit action for state 'INIT_SYSTEM'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* 'default' enter sequence for state IDLE */
void Statechart::enseq_main_region_IDLE_default()
{
	/* 'default' enter sequence for state IDLE */
	enact_main_region_IDLE();
	stateConfVector[0] = main_region_IDLE;
}

/* 'default' enter sequence for state MENU */
void Statechart::enseq_main_region_MENU_default()
{
	/* 'default' enter sequence for state MENU */
	enact_main_region_MENU();
	stateConfVector[0] = main_region_MENU;
}

/* 'default' enter sequence for state EXIT */
void Statechart::enseq_main_region_EXIT_default()
{
	/* 'default' enter sequence for state EXIT */
	enact_main_region_EXIT();
	stateConfVector[0] = main_region_EXIT;
}

/* 'default' enter sequence for state STANDARD_PROCESS */
void Statechart::enseq_main_region_STANDARD_PROCESS_default()
{
	/* 'default' enter sequence for state STANDARD_PROCESS */
	enseq_main_region_STANDARD_PROCESS_standard_process_default();
}

/* 'default' enter sequence for state START_PROCESS */
void Statechart::enseq_main_region_STANDARD_PROCESS_standard_process_START_PROCESS_default()
{
	/* 'default' enter sequence for state START_PROCESS */
	enact_main_region_STANDARD_PROCESS_standard_process_START_PROCESS();
	stateConfVector[0] = main_region_STANDARD_PROCESS_standard_process_START_PROCESS;
}

/* 'default' enter sequence for state HEATING */
void Statechart::enseq_main_region_STANDARD_PROCESS_standard_process_HEATING_default()
{
	/* 'default' enter sequence for state HEATING */
	enact_main_region_STANDARD_PROCESS_standard_process_HEATING();
	stateConfVector[0] = main_region_STANDARD_PROCESS_standard_process_HEATING;
}

/* 'default' enter sequence for state RESTING */
void Statechart::enseq_main_region_STANDARD_PROCESS_standard_process_RESTING_default()
{
	/* 'default' enter sequence for state RESTING */
	enact_main_region_STANDARD_PROCESS_standard_process_RESTING();
	stateConfVector[0] = main_region_STANDARD_PROCESS_standard_process_RESTING;
}

/* 'default' enter sequence for state FINISH_PROCESS */
void Statechart::enseq_main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS_default()
{
	/* 'default' enter sequence for state FINISH_PROCESS */
	enact_main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS();
	stateConfVector[0] = main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS;
}

/* 'default' enter sequence for state HEATING_2 */
void Statechart::enseq_main_region_STANDARD_PROCESS_standard_process_HEATING_2_default()
{
	/* 'default' enter sequence for state HEATING_2 */
	enact_main_region_STANDARD_PROCESS_standard_process_HEATING_2();
	stateConfVector[0] = main_region_STANDARD_PROCESS_standard_process_HEATING_2;
}

/* 'default' enter sequence for state RESTING_2 */
void Statechart::enseq_main_region_STANDARD_PROCESS_standard_process_RESTING_2_default()
{
	/* 'default' enter sequence for state RESTING_2 */
	enact_main_region_STANDARD_PROCESS_standard_process_RESTING_2();
	stateConfVector[0] = main_region_STANDARD_PROCESS_standard_process_RESTING_2;
}

/* 'default' enter sequence for state CUSTOM_SETUP */
void Statechart::enseq_main_region_CUSTOM_SETUP_default()
{
	/* 'default' enter sequence for state CUSTOM_SETUP */
	enseq_main_region_CUSTOM_SETUP_custom_setup_default();
}

/* 'default' enter sequence for state SET_TEMPERATURE */
void Statechart::enseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_default()
{
	/* 'default' enter sequence for state SET_TEMPERATURE */
	enact_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE();
	stateConfVector[0] = main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE;
}

/* 'default' enter sequence for state SET_TIME */
void Statechart::enseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_default()
{
	/* 'default' enter sequence for state SET_TIME */
	enact_main_region_CUSTOM_SETUP_custom_setup_SET_TIME();
	stateConfVector[0] = main_region_CUSTOM_SETUP_custom_setup_SET_TIME;
}

/* 'default' enter sequence for state SET_TEMPERATURE_2 */
void Statechart::enseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2_default()
{
	/* 'default' enter sequence for state SET_TEMPERATURE_2 */
	enact_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2();
	stateConfVector[0] = main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2;
}

/* 'default' enter sequence for state SET_TIME_2 */
void Statechart::enseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2_default()
{
	/* 'default' enter sequence for state SET_TIME_2 */
	enact_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2();
	stateConfVector[0] = main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2;
}

/* 'default' enter sequence for state START_SETUP_PROCESS */
void Statechart::enseq_main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS_default()
{
	/* 'default' enter sequence for state START_SETUP_PROCESS */
	enact_main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS();
	stateConfVector[0] = main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS;
}

/* 'default' enter sequence for state INIT_SYSTEM */
void Statechart::enseq_main_region_INIT_SYSTEM_default()
{
	/* 'default' enter sequence for state INIT_SYSTEM */
	enact_main_region_INIT_SYSTEM();
	stateConfVector[0] = main_region_INIT_SYSTEM;
}

/* 'default' enter sequence for state RECIPE_1 */
void Statechart::enseq_main_region_RECIPE_1_default()
{
	/* 'default' enter sequence for state RECIPE_1 */
	enact_main_region_RECIPE_1();
	stateConfVector[0] = main_region_RECIPE_1;
}

/* 'default' enter sequence for state RECIPE_2 */
void Statechart::enseq_main_region_RECIPE_2_default()
{
	/* 'default' enter sequence for state RECIPE_2 */
	enact_main_region_RECIPE_2();
	stateConfVector[0] = main_region_RECIPE_2;
}

/* 'default' enter sequence for state RECIPE_3 */
void Statechart::enseq_main_region_RECIPE_3_default()
{
	/* 'default' enter sequence for state RECIPE_3 */
	enact_main_region_RECIPE_3();
	stateConfVector[0] = main_region_RECIPE_3;
}

/* 'default' enter sequence for state RECIPE_4 */
void Statechart::enseq_main_region_RECIPE_4_default()
{
	/* 'default' enter sequence for state RECIPE_4 */
	enact_main_region_RECIPE_4();
	stateConfVector[0] = main_region_RECIPE_4;
}

/* 'default' enter sequence for state RECIPE_5 */
void Statechart::enseq_main_region_RECIPE_5_default()
{
	/* 'default' enter sequence for state RECIPE_5 */
	enact_main_region_RECIPE_5();
	stateConfVector[0] = main_region_RECIPE_5;
}

/* 'default' enter sequence for region main region */
void Statechart::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* 'default' enter sequence for region standard_process */
void Statechart::enseq_main_region_STANDARD_PROCESS_standard_process_default()
{
	/* 'default' enter sequence for region standard_process */
	react_main_region_STANDARD_PROCESS_standard_process__entry_Default();
}

/* 'default' enter sequence for region custom_setup */
void Statechart::enseq_main_region_CUSTOM_SETUP_custom_setup_default()
{
	/* 'default' enter sequence for region custom_setup */
	react_main_region_CUSTOM_SETUP_custom_setup__entry_Default();
}

/* Default exit sequence for state IDLE */
void Statechart::exseq_main_region_IDLE()
{
	/* Default exit sequence for state IDLE */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state MENU */
void Statechart::exseq_main_region_MENU()
{
	/* Default exit sequence for state MENU */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state EXIT */
void Statechart::exseq_main_region_EXIT()
{
	/* Default exit sequence for state EXIT */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state STANDARD_PROCESS */
void Statechart::exseq_main_region_STANDARD_PROCESS()
{
	/* Default exit sequence for state STANDARD_PROCESS */
	exseq_main_region_STANDARD_PROCESS_standard_process();
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state START_PROCESS */
void Statechart::exseq_main_region_STANDARD_PROCESS_standard_process_START_PROCESS()
{
	/* Default exit sequence for state START_PROCESS */
	stateConfVector[0] = main_region_STANDARD_PROCESS;
}

/* Default exit sequence for state HEATING */
void Statechart::exseq_main_region_STANDARD_PROCESS_standard_process_HEATING()
{
	/* Default exit sequence for state HEATING */
	stateConfVector[0] = main_region_STANDARD_PROCESS;
}

/* Default exit sequence for state RESTING */
void Statechart::exseq_main_region_STANDARD_PROCESS_standard_process_RESTING()
{
	/* Default exit sequence for state RESTING */
	stateConfVector[0] = main_region_STANDARD_PROCESS;
}

/* Default exit sequence for state FINISH_PROCESS */
void Statechart::exseq_main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS()
{
	/* Default exit sequence for state FINISH_PROCESS */
	stateConfVector[0] = main_region_STANDARD_PROCESS;
}

/* Default exit sequence for state HEATING_2 */
void Statechart::exseq_main_region_STANDARD_PROCESS_standard_process_HEATING_2()
{
	/* Default exit sequence for state HEATING_2 */
	stateConfVector[0] = main_region_STANDARD_PROCESS;
}

/* Default exit sequence for state RESTING_2 */
void Statechart::exseq_main_region_STANDARD_PROCESS_standard_process_RESTING_2()
{
	/* Default exit sequence for state RESTING_2 */
	stateConfVector[0] = main_region_STANDARD_PROCESS;
}

/* Default exit sequence for state CUSTOM_SETUP */
void Statechart::exseq_main_region_CUSTOM_SETUP()
{
	/* Default exit sequence for state CUSTOM_SETUP */
	exseq_main_region_CUSTOM_SETUP_custom_setup();
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state SET_TEMPERATURE */
void Statechart::exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE()
{
	/* Default exit sequence for state SET_TEMPERATURE */
	stateConfVector[0] = main_region_CUSTOM_SETUP;
}

/* Default exit sequence for state SET_TIME */
void Statechart::exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME()
{
	/* Default exit sequence for state SET_TIME */
	stateConfVector[0] = main_region_CUSTOM_SETUP;
}

/* Default exit sequence for state SET_TEMPERATURE_2 */
void Statechart::exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2()
{
	/* Default exit sequence for state SET_TEMPERATURE_2 */
	stateConfVector[0] = main_region_CUSTOM_SETUP;
}

/* Default exit sequence for state SET_TIME_2 */
void Statechart::exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2()
{
	/* Default exit sequence for state SET_TIME_2 */
	stateConfVector[0] = main_region_CUSTOM_SETUP;
}

/* Default exit sequence for state START_SETUP_PROCESS */
void Statechart::exseq_main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS()
{
	/* Default exit sequence for state START_SETUP_PROCESS */
	stateConfVector[0] = main_region_CUSTOM_SETUP;
}

/* Default exit sequence for state INIT_SYSTEM */
void Statechart::exseq_main_region_INIT_SYSTEM()
{
	/* Default exit sequence for state INIT_SYSTEM */
	stateConfVector[0] = Statechart_last_state;
	exact_main_region_INIT_SYSTEM();
}

/* Default exit sequence for state RECIPE_1 */
void Statechart::exseq_main_region_RECIPE_1()
{
	/* Default exit sequence for state RECIPE_1 */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state RECIPE_2 */
void Statechart::exseq_main_region_RECIPE_2()
{
	/* Default exit sequence for state RECIPE_2 */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state RECIPE_3 */
void Statechart::exseq_main_region_RECIPE_3()
{
	/* Default exit sequence for state RECIPE_3 */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state RECIPE_4 */
void Statechart::exseq_main_region_RECIPE_4()
{
	/* Default exit sequence for state RECIPE_4 */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state RECIPE_5 */
void Statechart::exseq_main_region_RECIPE_5()
{
	/* Default exit sequence for state RECIPE_5 */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for region main region */
void Statechart::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of Statechart.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_IDLE :
		{
			exseq_main_region_IDLE();
			break;
		}
		case main_region_MENU :
		{
			exseq_main_region_MENU();
			break;
		}
		case main_region_EXIT :
		{
			exseq_main_region_EXIT();
			break;
		}
		case main_region_STANDARD_PROCESS :
		{
			exseq_main_region_STANDARD_PROCESS();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_START_PROCESS :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_START_PROCESS();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_HEATING :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_HEATING();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_RESTING :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_RESTING();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_HEATING_2 :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_HEATING_2();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_RESTING_2 :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_RESTING_2();
			break;
		}
		case main_region_CUSTOM_SETUP :
		{
			exseq_main_region_CUSTOM_SETUP();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TIME :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2 :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2 :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS();
			break;
		}
		case main_region_INIT_SYSTEM :
		{
			exseq_main_region_INIT_SYSTEM();
			break;
		}
		case main_region_RECIPE_1 :
		{
			exseq_main_region_RECIPE_1();
			break;
		}
		case main_region_RECIPE_2 :
		{
			exseq_main_region_RECIPE_2();
			break;
		}
		case main_region_RECIPE_3 :
		{
			exseq_main_region_RECIPE_3();
			break;
		}
		case main_region_RECIPE_4 :
		{
			exseq_main_region_RECIPE_4();
			break;
		}
		case main_region_RECIPE_5 :
		{
			exseq_main_region_RECIPE_5();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region standard_process */
void Statechart::exseq_main_region_STANDARD_PROCESS_standard_process()
{
	/* Default exit sequence for region standard_process */
	/* Handle exit of all possible states (of Statechart.main_region.STANDARD_PROCESS.standard_process) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_STANDARD_PROCESS_standard_process_START_PROCESS :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_START_PROCESS();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_HEATING :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_HEATING();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_RESTING :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_RESTING();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_HEATING_2 :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_HEATING_2();
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_RESTING_2 :
		{
			exseq_main_region_STANDARD_PROCESS_standard_process_RESTING_2();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region custom_setup */
void Statechart::exseq_main_region_CUSTOM_SETUP_custom_setup()
{
	/* Default exit sequence for region custom_setup */
	/* Handle exit of all possible states (of Statechart.main_region.CUSTOM_SETUP.custom_setup) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TIME :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2 :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2 :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2();
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS :
		{
			exseq_main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region_STANDARD_PROCESS_standard_process__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_STANDARD_PROCESS_standard_process_START_PROCESS_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region_CUSTOM_SETUP_custom_setup__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_IDLE_default();
}

sc_integer Statechart::main_region_IDLE_react(const sc_integer transitioned_before) {
	/* The reactions of state IDLE. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (start_button_raised)
		{ 
			exseq_main_region_IDLE();
			enseq_main_region_INIT_SYSTEM_default();
			transitioned_after = 0;
		}  else
		{
			if (exit_process_raised)
			{ 
				exseq_main_region_IDLE();
				enseq_main_region_EXIT_default();
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_MENU_react(const sc_integer transitioned_before) {
	/* The reactions of state MENU. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (custom_setup_raised)
		{ 
			exseq_main_region_MENU();
			enseq_main_region_CUSTOM_SETUP_default();
			transitioned_after = 0;
		}  else
		{
			if (recipe_1_raised)
			{ 
				exseq_main_region_MENU();
				enseq_main_region_RECIPE_1_default();
				transitioned_after = 0;
			}  else
			{
				if (recipe_2_raised)
				{ 
					exseq_main_region_MENU();
					enseq_main_region_RECIPE_2_default();
					transitioned_after = 0;
				}  else
				{
					if (recipe_3_raised)
					{ 
						exseq_main_region_MENU();
						enseq_main_region_RECIPE_3_default();
						transitioned_after = 0;
					}  else
					{
						if (recipe_4_raised)
						{ 
							exseq_main_region_MENU();
							enseq_main_region_RECIPE_4_default();
							transitioned_after = 0;
						}  else
						{
							if (recipe_5_raised)
							{ 
								exseq_main_region_MENU();
								enseq_main_region_RECIPE_5_default();
								transitioned_after = 0;
							} 
						}
					}
				}
			}
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_STANDARD_PROCESS_standard_process_START_PROCESS_react(const sc_integer transitioned_before) {
	/* The reactions of state START_PROCESS. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (heating_raised)
		{ 
			exseq_main_region_STANDARD_PROCESS_standard_process_START_PROCESS();
			enseq_main_region_STANDARD_PROCESS_standard_process_HEATING_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_STANDARD_PROCESS_standard_process_HEATING_react(const sc_integer transitioned_before) {
	/* The reactions of state HEATING. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (resting_raised)
		{ 
			exseq_main_region_STANDARD_PROCESS_standard_process_HEATING();
			enseq_main_region_STANDARD_PROCESS_standard_process_RESTING_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_STANDARD_PROCESS_standard_process_RESTING_react(const sc_integer transitioned_before) {
	/* The reactions of state RESTING. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (heating_2_raised)
		{ 
			exseq_main_region_STANDARD_PROCESS_standard_process_RESTING();
			enseq_main_region_STANDARD_PROCESS_standard_process_HEATING_2_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS_react(const sc_integer transitioned_before) {
	/* The reactions of state FINISH_PROCESS. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (finish_process_idle_raised)
		{ 
			exseq_main_region_STANDARD_PROCESS();
			enseq_main_region_IDLE_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_STANDARD_PROCESS_standard_process_HEATING_2_react(const sc_integer transitioned_before) {
	/* The reactions of state HEATING_2. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (resting_2_raised)
		{ 
			exseq_main_region_STANDARD_PROCESS_standard_process_HEATING_2();
			enseq_main_region_STANDARD_PROCESS_standard_process_RESTING_2_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_STANDARD_PROCESS_standard_process_RESTING_2_react(const sc_integer transitioned_before) {
	/* The reactions of state RESTING_2. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (finish_process_raised)
		{ 
			exseq_main_region_STANDARD_PROCESS_standard_process_RESTING_2();
			enseq_main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_react(const sc_integer transitioned_before) {
	/* The reactions of state SET_TEMPERATURE. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (set_time_raised)
		{ 
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE();
			enseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_CUSTOM_SETUP_custom_setup_SET_TIME_react(const sc_integer transitioned_before) {
	/* The reactions of state SET_TIME. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (set_temperature_2_raised)
		{ 
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME();
			enseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2_react(const sc_integer transitioned_before) {
	/* The reactions of state SET_TEMPERATURE_2. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (set_time_2_raised)
		{ 
			exseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2();
			enseq_main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2_react(const sc_integer transitioned_before) {
	/* The reactions of state SET_TIME_2. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (standard_process_custom_raised)
		{ 
			exseq_main_region_CUSTOM_SETUP();
			enseq_main_region_STANDARD_PROCESS_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS_react(const sc_integer transitioned_before) {
	/* The reactions of state START_SETUP_PROCESS. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (set_temperature_raised)
		{ 
			exseq_main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS();
			enseq_main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_INIT_SYSTEM_react(const sc_integer transitioned_before) {
	/* The reactions of state INIT_SYSTEM. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (timeEvents[0])
		{ 
			exseq_main_region_INIT_SYSTEM();
			timeEvents[0] = false;
			enseq_main_region_MENU_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_RECIPE_1_react(const sc_integer transitioned_before) {
	/* The reactions of state RECIPE_1. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (recipe_back_menu_raised)
		{ 
			exseq_main_region_RECIPE_1();
			enseq_main_region_MENU_default();
			transitioned_after = 0;
		}  else
		{
			if (recipe_1_process_raised)
			{ 
				exseq_main_region_RECIPE_1();
				enseq_main_region_STANDARD_PROCESS_default();
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_RECIPE_2_react(const sc_integer transitioned_before) {
	/* The reactions of state RECIPE_2. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (recipe_back_menu_raised)
		{ 
			exseq_main_region_RECIPE_2();
			enseq_main_region_MENU_default();
			transitioned_after = 0;
		}  else
		{
			if (recipe_2_process_raised)
			{ 
				exseq_main_region_RECIPE_2();
				enseq_main_region_STANDARD_PROCESS_default();
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_RECIPE_3_react(const sc_integer transitioned_before) {
	/* The reactions of state RECIPE_3. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (recipe_back_menu_raised)
		{ 
			exseq_main_region_RECIPE_3();
			enseq_main_region_MENU_default();
			transitioned_after = 0;
		}  else
		{
			if (recipe_3_process_raised)
			{ 
				exseq_main_region_RECIPE_3();
				enseq_main_region_STANDARD_PROCESS_default();
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_RECIPE_4_react(const sc_integer transitioned_before) {
	/* The reactions of state RECIPE_4. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (recipe_back_menu_raised)
		{ 
			exseq_main_region_RECIPE_4();
			enseq_main_region_MENU_default();
			transitioned_after = 0;
		}  else
		{
			if (recipe_4_process_raised)
			{ 
				exseq_main_region_RECIPE_4();
				enseq_main_region_STANDARD_PROCESS_default();
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_RECIPE_5_react(const sc_integer transitioned_before) {
	/* The reactions of state RECIPE_5. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (recipe_back_menu_raised)
		{ 
			exseq_main_region_RECIPE_5();
			enseq_main_region_MENU_default();
			transitioned_after = 0;
		}  else
		{
			if (recipe_5_process_raised)
			{ 
				exseq_main_region_RECIPE_5();
				enseq_main_region_STANDARD_PROCESS_default();
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

void Statechart::clearInEvents() {
	menu_raised = false;
	standard_process_raised = false;
	heating_raised = false;
	resting_raised = false;
	heating_2_raised = false;
	resting_2_raised = false;
	idle_raised = false;
	custom_setup_raised = false;
	set_temperature_raised = false;
	set_time_raised = false;
	set_temperature_2_raised = false;
	set_time_2_raised = false;
	add_step_raised = false;
	standard_process_custom_raised = false;
	finish_process_raised = false;
	finish_process_idle_raised = false;
	start_button_raised = false;
	exit_process_raised = false;
	recipe_1_raised = false;
	recipe_2_raised = false;
	recipe_3_raised = false;
	recipe_4_raised = false;
	recipe_5_raised = false;
	recipe_back_menu_raised = false;
	recipe_1_process_raised = false;
	recipe_2_process_raised = false;
	recipe_3_process_raised = false;
	recipe_4_process_raised = false;
	recipe_5_process_raised = false;
	timeEvents[0] = false;
}

void Statechart::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case main_region_IDLE :
		{
			main_region_IDLE_react(-1);
			break;
		}
		case main_region_MENU :
		{
			main_region_MENU_react(-1);
			break;
		}
		case main_region_EXIT :
		{
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_START_PROCESS :
		{
			main_region_STANDARD_PROCESS_standard_process_START_PROCESS_react(-1);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_HEATING :
		{
			main_region_STANDARD_PROCESS_standard_process_HEATING_react(-1);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_RESTING :
		{
			main_region_STANDARD_PROCESS_standard_process_RESTING_react(-1);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS :
		{
			main_region_STANDARD_PROCESS_standard_process_FINISH_PROCESS_react(-1);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_HEATING_2 :
		{
			main_region_STANDARD_PROCESS_standard_process_HEATING_2_react(-1);
			break;
		}
		case main_region_STANDARD_PROCESS_standard_process_RESTING_2 :
		{
			main_region_STANDARD_PROCESS_standard_process_RESTING_2_react(-1);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE :
		{
			main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_react(-1);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TIME :
		{
			main_region_CUSTOM_SETUP_custom_setup_SET_TIME_react(-1);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2 :
		{
			main_region_CUSTOM_SETUP_custom_setup_SET_TEMPERATURE_2_react(-1);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2 :
		{
			main_region_CUSTOM_SETUP_custom_setup_SET_TIME_2_react(-1);
			break;
		}
		case main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS :
		{
			main_region_CUSTOM_SETUP_custom_setup_START_SETUP_PROCESS_react(-1);
			break;
		}
		case main_region_INIT_SYSTEM :
		{
			main_region_INIT_SYSTEM_react(-1);
			break;
		}
		case main_region_RECIPE_1 :
		{
			main_region_RECIPE_1_react(-1);
			break;
		}
		case main_region_RECIPE_2 :
		{
			main_region_RECIPE_2_react(-1);
			break;
		}
		case main_region_RECIPE_3 :
		{
			main_region_RECIPE_3_react(-1);
			break;
		}
		case main_region_RECIPE_4 :
		{
			main_region_RECIPE_4_react(-1);
			break;
		}
		case main_region_RECIPE_5 :
		{
			main_region_RECIPE_5_react(-1);
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
	} while (dispatch_event(getNextEvent()));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default();
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_main_region();
	stateConfVector[0] = Statechart_last_state;
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void Statechart::triggerWithoutEvent() {
	runCycle();
}


